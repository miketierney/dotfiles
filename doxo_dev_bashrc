# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
if [[ -n "$PS1" ]]; then

  # don't put duplicate lines in the history. See bash(1) for more options
  # don't overwrite GNU Midnight Commander's setting of `ignorespace'.
  HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
  # ... or force ignoredups and ignorespace
  HISTCONTROL=ignoreboth

  # append to the history file, don't overwrite it
  shopt -s histappend

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # set variable identifying the chroot you work in (used in the prompt below)
  if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
      debian_chroot=$(cat /etc/debian_chroot)
  fi

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
      . /etc/bash_completion
  fi

  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
      xterm-color) color_prompt=yes;;
  esac

  # uncomment for a colored prompt, if the terminal has the capability; turned
  # off by default to not distract the user: the focus in a terminal window
  # should be on the output of commands, not on the prompt
  force_color_prompt=yes

  if [ -n "$force_color_prompt" ]; then
      if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  	# We have color support; assume it's compliant with Ecma-48
  	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  	# a case would tend to support setf rather than setaf.)
  	color_prompt=yes
      else
  	color_prompt=
      fi
  fi

  git_dirty_flag() {
    git status 2> /dev/null | grep -c : | awk '{if ($1 > 0) print " *"}'
  }

  if [ "$color_prompt" = yes ]; then
      PS1='${debian_chroot:+($debian_chroot)}\[\033[01;36m\]\u\[\033[01;34m\]@\h\[\033[00m\] \[\033[01;32m\]\w\[\033[01;33m\] $(__git_ps1 "(%s) ")\[\033[00m\]\$\[\e[01;31m\]$(git_dirty_flag)\[\e[0m\] '
  else
      PS1='${debian_chroot:+($debian_chroot)}\u@\h \w$(__git_ps1 " (%s)")\$$(git_dirty_flag) '
  fi
  unset color_prompt force_color_prompt

  COLOR_YELLOW='\[\e[33;33m\]'
  COLOR_GREEN='\[\033[32;32m\]'
  COLOR_RED='\[\e[01;31m\]'
  COLOR_NONE='\[\e[0m\]'
  COLOR_CYAN='\[\033[32;36m\]'
  COLOR_BLUE='\[\033[32;34m\]'



  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
  xterm*|rxvt*)
      PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
      ;;
  *)
      ;;
  esac

  # enable color support of ls and also add handy aliases
  if [ -x /usr/bin/dircolors ]; then
      test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
      alias ls='ls --color=auto'
      #alias dir='dir --color=auto'
      #alias vdir='vdir --color=auto'

      alias grep='grep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias egrep='egrep --color=auto'
  fi

  # some more ls aliases
  alias ll='ls -l'
  alias la='ls -A'
  alias l='ls -CF'

  # Alias definitions.
  # You may want to put all your additions into a separate file like
  # ~/.bash_aliases, instead of adding them here directly.
  # See /usr/share/doc/bash-doc/examples in the bash-doc package.

  if [ -f ~/.bash_aliases ]; then
      . ~/.bash_aliases
  fi

  # Faster navigation
  alias ll='ls -al'
  alias search=grep
  alias mc='mc -c'
  alias ..='cd ../'
  alias ...='cd ../..'
  alias home='cd $HOME'

  # Compress the cd, ls -l series of commands
  alias lc='cl'
  function cl () {
  	if [ $# = 0 ]; then
  		cd && ll
  	else
  		cd "$*" && ll
  	fi
  }

  # Searching - ACK is a little weird in this particular Ubuntu install
  alias ack='ack-grep'

  # Rails commands
  alias sc='./script/console'
  alias ss='./script/server'
  alias rdm='rake db:migrate'
  alias rdtp='rake db:test:prepare'
  alias rdma='rake db:migrate && rake db:test:prepare'

  # Mike's sanity-saving shortcuts
  # directory shortcuts
  alias aspen='cd ~/projects/aspen'
  alias spec_aspen='cd ~/projects/aspen && autospec'
  alias log_aspen='cd ~/projects/aspen && tail -f log/development.log'
  alias list_aspen='cd ~/projects/aspen && ls -al'
  alias tail_aspen=log_aspen
  alias git_aspen='aspen && gs'

  # Task management --uses 't' (http://bitbucket.org/sjl/t)
  alias t='python ~/utilities/t/t.py --task-dir ~/tasks --list tasks'
  alias d='python ~/utilities/t/t.py --task-dir ~/tasks --list doxo'
  alias b='python ~/utilities/t/t.py --task-dir ~/tasks --list bugs'

  # apache short cut
  alias start_apache='sudo /etc/init.d/apache2 start'
  alias apstart=start_apache

  alias stop_apache='sudo /etc/init.d/apache2 stop'
  alias apstop=stop_apache

  alias restart_apache='sudo /etc/init.d/apache2 restart'
  alias aprestart=restart_apache

  alias reload_apache='sudo /etc/init.d/apache2 reload'
  alias apreload=reload_apache

  # MySQL commands
  alias start_mysql='sudo service mysql start'
  alias stop_mysql='sudo service mysql stop'

  # Git commands
  alias gs='git-sh'
  alias gst='git status'
  alias gsup='git sup'
  alias gup='git up'

  # Github commands
  alias git=hub

  # enable Git tab completion
  complete -o default -o nospace -F _git_checkout gco
  complete -o default -o nospace -F _git_checkout gb
  complete -o default -o nospace -F _git_checkout gm
  complete -o default -o nospace -F _git_pull gl
  complete -o default -o nospace -F _git_push gp

  # Git Server Stuff
  alias git_daemon='sudo git daemon --base-path=/home/mike/shared/repositories/ --export-all --detach'
fi

[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
