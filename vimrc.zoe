" colorscheme topfunky-light      " use a lighter theme style by default
" set cmdheight=1                 " use a status bar that is 2 rows high

" Change the <leader> to a comma
let mapleader=","

" set invlist                     " show invisible characters
" set list
" set listchars=tab:>,eol:$,extends:#,nbsp:_
set cursorline                    " display the currently active line
set formatoptions=qrn1            " see :help fo-table for more on what this does
" set formatoptions-=0            " don't start new lines w/ comment leader on pressing 'o'
" au filetype vim set formatoptions-=o
                        " somehow, during vim filetype detection, this gets
                        " set, so explicitly unset it again for vim files

" Pathogen initialization
call pathogen#helptags()
silent! call pathogen#runtime_append_all_bundles()

" Override the default colorscheme.
"color solarized
"set background=dark
"color Tomorrow-Night-Eighties
color Tomorrow

" Enable 256 color support, if available
if $TERM=="xterm-256color"
  set t_Co=256
endif

" Enable 256 color support in screen
if $TERM=="xterm-256color"
  set t_Co=256
endif

" Display the mode you're in.
set showmode

" Handle multiple buffers better.
set hidden

" Indentation settings. Uncomment to use.
" set autoindent
" set copyindent

" Set up some more shell-like behaviors. Uncomment to use.
" set wildmenu                                      " Enhanced command line completion
" set wildmode=list:longest                         " Complete files like a shell
" set wildignore=*.swp,*.bak,.o,*.obj,.git,*.rbc

" Taming searching and movement
set gdefault                                      " Apply substitutions globally on lines. Single substitutions can be done by appending 'g' to the search pattern
nnoremap / /\v
vnoremap / /\v

" * scroll up and down 10 lines at a time
noremap <C-K> 10k
noremap <C-J> 10j

" Speed up scrolling of the viewport slightly
" nnoremap <C-e> 2<C-e>
" nnoremap <C-y> 2<C-y>

" Clear the search results highlighting
nnoremap <leader><space> :let @/=""<CR>

" Controversial ... swap colon and semicolon for easier commands

"nnoremap ; :
"nnoremap : ;
" Using ;; to restore the original ; (repeat previous command) functionality
" nnoremap ;; ;

"vnoremap ; :
"vnoremap : ;
" Using ;; to restore the original ; (repeat previous command) functionality
" vnoremap ;; ;

" Changing bracket pair matching movements from % to <tab>, since it's more
" natural
nnoremap <tab> %
vnoremap <tab> %
inoremap <tab> <C-P>

" show matching parenthesis. Uncomment to use.
" set showmatch

" set smarttab " insert tabs on the start of a line according to a shiftwidth, not tabstop

" Tab mappings.
"map <leader>tt :tabnew<cr>
map <leader>te :tabedit<cr>
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Easy window navigation
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Ragtag stuff
" let g:ragtag_global_maps = 1

" Document formatting
" Use Q for formatting the current paragraph (or visual selection)
" vmap Q gq
" nmap Q gqap

" make p in Visual mode replace the selected text with the yank register
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>"

" Quickly edit/reload the vimrc files
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>egv :e $MYGVIMRC<CR>
nmap <silent> <leader>sgv :so $MYGVIMRC<CR>

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$', '\.obj$', '\.o$', '\.so$', '^\.git$']
map <leader>n :NERDTreeToggle<CR>

" Tagbar
nnoremap <silent> <F9> :TagbarToggle<CR>

" CTags
map <leader>rt :!ctags --extra=+f -R *<CR><CR>

" easymotion
let g:EasyMotion_leader_key = '<leader>m' " prevents this from conflicting with Command-T

" Conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" shortcut to jump to next conflict marker
nmap <silent> <leader>c /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>

" * Window splits

" Open new horizontal split windows below current
set splitbelow

" Open new vertical split windows to the right
set splitright

" Disable the help key, which is inconveniently placed next to the esc key. Dumb.
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" JSLint Rules
let g:JSLintHighlightErrorLine = 1

" Filetype specific handling
" only do this part when compiled with support for autocommands
if has("autocmd")
  augroup vim_files
    au!
    autocmd filetype cmd set expandtab        " disallow tabs in Vim files
  augroup end

  au BufRead,BufNewFile *.scss set filetype=scss
  au BufRead,BufNewFile *.js.erb set filetype=eruby.js
  au BufRead,BufNewFile *.html.erb set filetype=eruby.html

  " use closetag plugin to auto-close HTML tags
  " autocmd filetype html,xml,xsl source ~/.vim/scripts/html_autoclosetag.vim

  " render YAML front matter inside Textile documents as comments
  autocmd filetype textile syntax region frontmatter start=/\%^---$/ end=/^---$/
  autocmd filetype textile highlight link frontmatter Comment

  " Automatic fold settings for specific files. Uncomment to use.
  " autocmd FileType css,scss,sass setlocal foldmethod=indent shiftwidth=2 tabstop=2
  autocmd FileType css,scss,sass setlocal shiftwidth=2 tabstop=2

  " For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
  autocmd BufNewFile,BufRead *_spec.rb compiler rspec

  " Remember the last location in file
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

  " Saves on blur. Uncomment to use.
  " au FocusLost * :wa
endif " has("autocmd")


" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

" only do fancy commandline updating if we're not using the gui
if !has("gui_macvim")
  " Statusline {{{
    " Functions {{{
      " Statusline updater {{{
        " Inspired by StatusLineHighlight by Ingo Karkat
        function! s:StatusLine(new_stl, type, current)
          let current = (a:current ? "" : "NC")
          let type = a:type
          let new_stl = a:new_stl

          " Prepare current buffer specific text
          " Syntax: <CUR> ... </CUR>
          let new_stl = substitute(new_stl, '<CUR>\(.\{-,}\)</CUR>', (a:current ? '\1' : ''), 'g')

          " Prepare statusline colors
          " Syntax: #[ ... ]
          let new_stl = substitute(new_stl, '#\[\(\w\+\)\]', '%#StatusLine'.type.'\1'.current.'#', 'g')

          if &l:statusline ==# new_stl
            " Statusline already set, nothing to do
            return
          endif

          if empty(&l:statusline)
            " No statusline is set, use my_stl
            let &l:statusline = new_stl
          else
            " Check if a custom statusline is set
            let plain_stl = substitute(&l:statusline, '%#StatusLine\w\+#', '', 'g')

            if &l:statusline ==# plain_stl
              " A custom statusline is set, don't modify
              return
            endif

            " No custom statusline is set, use my_stl
            let &l:statusline = new_stl
          endif
        endfunction
      " }}}
      " Color dict parser {{{
        function! s:StatusLineColors(colors)
          for type in keys(a:colors)
            for name in keys(a:colors[type])
              let colors = {'c': a:colors[type][name][0], 'nc': a:colors[type][name][1]}
              let type = (type == 'NONE' ? '' : type)
              let name = (name == 'NONE' ? '' : name)

              if exists("colors['c'][0]")
                exec 'hi StatusLine'.type.name.' ctermbg='.colors['c'][0].' ctermfg='.colors['c'][1].' cterm='.colors['c'][2]
              endif

              if exists("colors['nc'][0]")
                exec 'hi StatusLine'.type.name.'NC ctermbg='.colors['nc'][0].' ctermfg='.colors['nc'][1].' cterm='.colors['nc'][2]
              endif
            endfor
          endfor
        endfunction
      " }}}
    " }}}
    " Default statusline {{{
      let g:default_stl  = ""
      let g:default_stl .= "<CUR>#[Mode] %{&paste ? 'PASTE  ' : ''}%{substitute(mode(), '', '', 'g')} #[ModeS]</CUR>"
      let g:default_stl .= "#[ModFlag]%{&readonly ? 'RO ' : ''}" " RO flag
      let g:default_stl .= " #[FileName]%t " " File name
      let g:default_stl .= "#[ModFlag]%(%M %)" " Modified flag
      let g:default_stl .= "#[BufFlag]%(%H%W %)" " HLP,PRV flags
      let g:default_stl .= "#[FileNameS] " " Separator
      let g:default_stl .= "#[FunctionName] " " Padding/HL group
      let g:default_stl .= "%<" " Truncate right
      let g:default_stl .= "%= " " Right align
      let g:default_stl .= "<CUR>#[FileFormat]%{&fileformat} </CUR>" " File format
      let g:default_stl .= "<CUR>#[FileEncoding]%{(&fenc == '' ? &enc : &fenc)} </CUR>" " File encoding
      let g:default_stl .= "<CUR>#[Separator]  âŠ‚ #[FileType]%{strlen(&ft) ? &ft : 'n/a'} </CUR>" " File type
      let g:default_stl .= "#[LinePercentS] #[LinePercent] %p%% " " Line/column/virtual column, Line percentage
      let g:default_stl .= "#[LineNumberS] #[LineNumber]  %l#[LineColumn]:%c%V " " Line/column/virtual column, Line percentage
      let g:default_stl .= "%{exists('g:synid') && g:synid ? ' '.synIDattr(synID(line('.'), col('.'), 1), 'name').' ' : ''}" " Current syntax group
    " }}}
    " Color dict {{{
      let s:statuscolors = {
        \   'NONE': {
          \   'NONE'         : [[ 236, 231, 'bold'], [ 232, 244, 'none']]
        \ }
        \ , 'Normal': {
          \   'Mode'         : [[ 214, 235, 'bold'], [                 ]]
          \ , 'ModeS'        : [[ 214, 240, 'bold'], [                 ]]
          \ , 'Branch'       : [[ 240, 250, 'none'], [ 234, 239, 'none']]
          \ , 'BranchS'      : [[ 240, 246, 'none'], [ 234, 239, 'none']]
          \ , 'FileName'     : [[ 240, 231, 'bold'], [ 234, 244, 'none']]
          \ , 'FileNameS'    : [[ 240, 236, 'bold'], [ 234, 232, 'none']]
          \ , 'Error'        : [[ 240, 202, 'bold'], [ 234, 239, 'none']]
          \ , 'ModFlag'      : [[ 240, 196, 'bold'], [ 234, 239, 'none']]
          \ , 'BufFlag'      : [[ 240, 250, 'none'], [ 234, 239, 'none']]
          \ , 'FunctionName' : [[ 236, 247, 'none'], [ 232, 239, 'none']]
          \ , 'FileFormat'   : [[ 236, 244, 'none'], [ 232, 239, 'none']]
          \ , 'FileEncoding' : [[ 236, 244, 'none'], [ 232, 239, 'none']]
          \ , 'Separator'    : [[ 236, 242, 'none'], [ 232, 239, 'none']]
          \ , 'FileType'     : [[ 236, 248, 'none'], [ 232, 239, 'none']]
          \ , 'LinePercentS' : [[ 240, 236, 'none'], [ 234, 232, 'none']]
          \ , 'LinePercent'  : [[ 240, 250, 'none'], [ 234, 239, 'none']]
          \ , 'LineNumberS'  : [[ 252, 240, 'bold'], [ 234, 234, 'none']]
          \ , 'LineNumber'   : [[ 252, 236, 'bold'], [ 234, 244, 'none']]
          \ , 'LineColumn'   : [[ 252, 240, 'none'], [ 234, 239, 'none']]
        \ }
        \ , 'Insert': {
          \   'Mode'         : [[ 153,  23, 'bold'], [                 ]]
          \ , 'ModeS'        : [[ 153,  31, 'bold'], [                 ]]
          \ , 'Branch'       : [[  31, 117, 'none'], [                 ]]
          \ , 'BranchS'      : [[  31, 117, 'none'], [                 ]]
          \ , 'FileName'     : [[  31, 231, 'bold'], [                 ]]
          \ , 'FileNameS'    : [[  31,  24, 'bold'], [                 ]]
          \ , 'Error'        : [[  31, 202, 'bold'], [                 ]]
          \ , 'ModFlag'      : [[  31, 196, 'bold'], [                 ]]
          \ , 'BufFlag'      : [[  31,  75, 'none'], [                 ]]
          \ , 'FunctionName' : [[  24, 117, 'none'], [                 ]]
          \ , 'FileFormat'   : [[  24,  75, 'none'], [                 ]]
          \ , 'FileEncoding' : [[  24,  75, 'none'], [                 ]]
          \ , 'Separator'    : [[  24,  37, 'none'], [                 ]]
          \ , 'FileType'     : [[  24,  81, 'none'], [                 ]]
          \ , 'LinePercentS' : [[  31,  24, 'none'], [                 ]]
          \ , 'LinePercent'  : [[  31, 117, 'none'], [                 ]]
          \ , 'LineNumberS'  : [[ 117,  31, 'bold'], [                 ]]
          \ , 'LineNumber'   : [[ 117,  23, 'bold'], [                 ]]
          \ , 'LineColumn'   : [[ 117,  31, 'none'], [                 ]]
        \ }
      \ }
    " }}}
  " }}}

  " Statusline highlighting {{{
  augroup StatusLineHighlight
    autocmd!

    let s:round_stl = 0

    au ColorScheme * call <SID>StatusLineColors(s:statuscolors)
    au BufEnter,BufWinEnter,WinEnter,CmdwinEnter,CursorHold,BufWritePost,InsertLeave * call <SID>StatusLine((exists('b:stl') ? b:stl : g:default_stl), 'Normal', 1)
    au BufLeave,BufWinLeave,WinLeave,CmdwinLeave * call <SID>StatusLine((exists('b:stl') ? b:stl : g:default_stl), 'Normal', 0)
    au InsertEnter,CursorHoldI * call <SID>StatusLine((exists('b:stl') ? b:stl : g:default_stl), 'Insert', 1)
  augroup END
  " }}}

  augroup General " {{{
    autocmd!
    " Help file settings {{{
      function! s:SetupHelpWindow()
        wincmd L
        vertical resize 80
        setl nonumber winfixwidth colorcolumn=

        let b:stl = "#[Branch] HELP#[BranchS] [>] #[FileName]%<%t #[FileNameS][>>]%* %=#[LinePercentS][<<]#[LinePercent] %p%% " " Set custom statusline

        nnoremap <buffer> <Space> <C-]> " Space selects subject
        nnoremap <buffer> <BS>    <C-T> " Backspace to go back
      endfunction

      au FileType help au BufEnter,BufWinEnter <buffer> call <SID>SetupHelpWindow()
    " }}}
  augroup END " }}}
endif
